1.	Selection Sort (LA)

two for loops, the outer for loop should be less, update global min in the inner for loop.

2.	Merge Sort (LA)

time complexity: O(nlogn), when merge be careful the case when left side of array has remaining.
	While (leftIndex <= mid) {
		array[left++] = array[leftIndex++];
}
Two pointers, move the pointer with smaller value every time.

public int[] mergeSort(int[] array) {
    // Write your solution here
    int[] helper = new int[array.length];
    mergeSort(array, helper, 0, array.length - 1);
    return array;
  }
  
  private void mergeSort(int[] array, int[] helper, int left, int right) {
    if (left >= right) {
      return;
    }
    int mid = left + (right - left) / 2;
    mergeSort(array, helper, left, mid);
    mergeSort(array, helper, mid +1, right);
    merge(array, helper, left, mid, right);
  }
  private void merge(int[] array, int[] helper, int left, int mid, int right) {
    for(int i = left; i <= right; i++) {
      helper[i] = array[i]; 
    }
    int leftIndex = left;
    int rightIndex = mid + 1;
    while(leftIndex <= mid && rightIndex <= right) {
      if(helper[leftIndex] > helper[rightIndex]) {
        array[left++] = helper[rightIndex++];
      } else {
        array[left++] = helper[leftIndex++];      
      }
    }
    while(leftIndex <= mid) {
      array[left++] = helper[leftIndex++];
    }
  }


3.	QuickSort (LA)

Put the pivot at the very end of the array before partition and swap back at the end.

4.	a power of b (LA)

Consider the case when b % 2 = 0 or not.

5.	Binary Search in 2D matrix (LA)

while(up <= down) {
	int mid = up + (down - up) / 2;
	if (matrix[mid][0] > target) {
	down = mid – 1;
} else {
	up = mid – 1;
}
}
	return down

6.	First Bad Version (LE 278, FB)

Binary Search find the first different place.

public int firstBadVersion(int n) {
        int left = 1;
        int right = n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (isBadVersion(mid) != true) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
}


7.	Count and Say (LE 38, FB)

private StringBuilder getNext(StringBuilder cur) {
        StringBuilder next = new StringBuilder();
        int count = 1;
        for(int i = 1; i < cur.length(); i++) {
            if( cur.charAt(i) != cur.charAt(i - 1)) {
                next.append(count).append(cur.charAt(i - 1));
                count = 1;
            } else{
                count++;
            }
             next.append(count).append(cur.charAt(cur.length() - 1));
        }
        return next;
}
User the simplest case to test the algorithm, here we can use 1 to test.

Two Pointers

8.	Merge Interval (LE 56, FB)

Find out the merge requirement:
	If ( i == n -1 || starts[i + 1] > ends[i]) {
	res.add(interval(start[j], end[i]));
	j = i + 1;
}
List is an interface, it could be implemented by ArrayList and LinkedList. Sort the start and end point separately. 

9.	Move Zeroes (LE 283, FB):
Two Pointers. Consider the meaning of the two pointers.
First Pointer: traverse through the list.
Second Pointer: the left side contains all none zero numbers.

10.	Task Scheduler (LE 621, FB) (Math Problem)

Find out the most frequent letter. We have to consider the case when there is a tie in max, we have to record the number of max letters.
Calculate the number of empty space of the same parts.

int partCount = max - 1;
        int partLength = n - (maxCount - 1);
        int emptySpaces = partCount * partLength;
        int idleNums = Math.max(0, emptySpaces - (tasks.length - (maxCount * max)));
        
        return idleNums + tasks.length;

11.	Intersection of Two Arrays II (LE 350, FB, Google)

Use HashMap to record the number of occurrences of every number in the first list. 





  


12.	Maximum Size Subarray Sum Equals k (LE 325, FB)

Use HashMap. 
Take care of the initial case where (Key = 0; Value = -1)
getOrDefault(Object key, V defaultValue)

Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.

public int maxSubArrayLen(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        int sum = 0;
        int maxLength = 0;
        //initial state: (0, -1);
        map.put(0,-1);
        for(int i = 0; i < nums.length; i++) {
            sum += nums[i];
            Integer index = map.get(sum - k); //sum from i to j = sum[j] - sum[i - 1]
            if (index != null && maxLength < i - index) {
                maxLength = i - index;
            } 
            map.put(sum, map.getOrDefault(sum, i));
        }
        return maxLength;
    }
}

 HashMap
13.	Top K Frequent Element (LE 347, FB)

a.	Use HashMap to count the frequency of each nums
b.	Use an array of ArrayList with the length of nums.length + 1 to represent the frequency of every nums, where the index represent the frequency.

public List<Integer> topKFrequent(int[] nums, int k) {
        ArrayList<Integer>[] bucket = new ArrayList[nums.length + 1];
        HashMap<Integer,Integer> map = new HashMap<Integer, Integer>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for (int key : map.keySet()) {
            int frequency = map.get(key);
            if (bucket[frequency] == null) {
                bucket[frequency] = new ArrayList<Integer>();
            }
            bucket[frequency].add(key);
        }
        List<Integer> result = new ArrayList<Integer>();
        for (int index = bucket.length - 1; index >= 0 && result.size() < k; index--) {
            if (bucket[index] != null) {
                result.addAll(bucket[index]);
            }
        }
        return result;
}

14.	Top K Frequent Words (LE 692)

public List<String> topKFrequent(String[] words, int k) {
        List<String> res = new ArrayList<String>();
        if (words == null || words.length == 0) {
            return res;
        }
        HashMap<String, Integer> map = new HashMap<String, Integer>();
        for (String word : words) {
            map.put(word, map.getOrDefault(word, 1) + 1);
        }
        PriorityQueue<Map.Entry<String, Integer>> minHeap = new PriorityQueue<Map.Entry<String, Integer>>(k, 
            new Comparator<Map.Entry<String,Integer>>() {
            public int compare(Map.Entry<String, Integer> a, Map.Entry<String, Integer> b) {
                return a.getValue() == b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue() - b.getValue();
            }
        });
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            minHeap.offer(entry);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }
        while (!minHeap.isEmpty()) {
            res.add(0, minHeap.poll().getKey());
        }
        return res;
    }


15.	3Sum (LE 15, LA 2 SUM, FB, Google)

Consider 2SUM, 3SUM, 4SUM.
2 SUM: 2 pointers
3 SUM: Sort the array first 
Run 2SUM inside the for loop.
	Only need to deduplicate the first and second number.


for (int i = 0; i < nums.length - 2; i++) {
            if (i > 0 && nums[i] == nums [i - 1]) { // deduplicate first number.
                continue;
            }
            int left = i + 1;
            int right = nums.length - 1;
            while (left < right) {
                int tmp = nums[left] + nums[right];
                if (tmp + nums[i] == 0) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                     left++;
                    while(left < right && nums[left] == nums[left - 1]) {
                        left++;
                    }
                } else if (tmp + nums[i] < 0) {
                    left++;
                } else {
                    right--;
                }
            } 
        }
	
16.	Longest Continuous Increasing Sequence (LE 674, FB)
Still need to be careful of the starting point of the loop.

  int max = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i == 0 || nums[i - 1] < nums[i]) {
                max = Math.max(max, ++count);
            } else {
                count = 1;
              }
            }
    return max;











Dynamic Programming

17.	Best time to Buy and Sell Stock (LE 121, FB)
Keep track of the minPrice . 






TREE
Balanced Tree: the depth of the left and right subtrees of every node differ by 1 or less.

Complete Tree: A complete binary tree is a binary tree in which every level, except 
possibly the last, is completely filled, and all nodes are as far left as possible.

Binary Search Tree: left subtree < node < right subtree.


18.	Binary Search Tree Iterator (LE 173, FB)
In-order traversal implemented by stack;
Need to find out the smallest number in the binary search tree first;


public int next() {
        TreeNode node = stack.pop();
        TreeNode cur = node.right;
        while(cur != null) {
            stack.push(cur);
            cur = cur.left;
        }
        return node.val;
        
}

Deque:
Throw exceptions 			Return special value 

addFirst/addLast			offerFirst/offerLast
removeFirst/ removeLast		pollFirst/ pollLast
getFirst/ getLast			peekFirst/ peekLast

Stack:
Push 

19.	Check If Binary Tree Is Balanced (LA)

What should be get from lower level
What should be down on current level
What should be returned to upper level

20.	Check if Binary Tree is Completed (LA)

public boolean isCompleted(TreeNode root) {
    if (root == null) {
      return true;
    }
    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    queue.offer(root);
    boolean flag = false;
    while (!queue.isEmpty()) {
      TreeNode cur = queue.poll();
      if (cur.left == null) {
        flag = true;
      } else if (flag && cur.left != null) {
        return false;
      } else {
        queue.offer(cur.left);
      }
      if (cur.right == null) {
        flag = true;
      } else if (flag && cur.right != null) {
        return false;
      } else {
        queue.offer(cur.right);
      }
    }
    return true;
  }


21.	Validate Binary Search Tree (LE 98, FB)

Recursion, keep track of the acceptable range of the binary search tree,
Use long to record the min and max value


22.	Binary Tree Level Order Traversal (LE 102, FB)

Use a variable to keep track of the level size;
Deque<> deque = new LinkedList<>;
Deque is an interface and cannot be initialized.



23.	Binary Tree Path (LE 257, FB)

Recursion (tail recursion),
Use a List to keep track of the result,
Be careful of the base case

if (root.left == null && root.right == null) { // definition of the root node.
            result.add(sol + root.val);
            return;
        }

24.	Lowest Common Ancestor of a Binary Tree (LE 236, FB)

Recursion Consider the case when a node to be a descendant of itself.

public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null) {
            return null;
        }
        if (root.val == p.val || root.val == q.val) {
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if (left != null && right != null) {
            return root;
        }
        
        return (left != null ? left : right);
        
    }

25.	Meeting Room II (LE 253, FB)
Use minheap.
1.	Sort the start time using comparator
2.	Put interval into minheap based on the end time.
3.	Go through all the interval based on the start time and compare the current intervals start time with the earliest end time. 
minHeap.offer(intervals[0]);
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i].start >= minHeap.peek().end) {
                minHeap.poll();
            }
            minHeap.offer(intervals[i]);
        }
        return minHeap.size();
}





DFS


26.	Subsets (LE 78, FB)

Using DFS, the return type of ArrayList<>.add is boolean 
When traverse back, we need to redo the previous action. 

MATH
 
27.	Multiply Strings (LE 43, FB)
Solution
Product[i + j + 1] = nums1[i] * nums2[j]

 
StringBuilder build in functions: length(), deleteCharAt(), append()

28.	Add String (LE 415, FB)

29.	







	








